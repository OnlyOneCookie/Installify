name: Create Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    name: Build and Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.23.1

      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF#refs/tags/}

      - name: Build for Windows
        run: GOOS=windows GOARCH=amd64 go build -o Installify_${{ steps.get_version.outputs.VERSION }}_windows.exe ./cmd/main.go

      - name: Build for macOS
        run: GOOS=darwin GOARCH=amd64 go build -o Installify_${{ steps.get_version.outputs.VERSION }}_macos ./cmd/main.go

      - name: Build for Linux
        run: GOOS=linux GOARCH=amd64 go build -o Installify_${{ steps.get_version.outputs.VERSION }}_linux ./cmd/main.go

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ steps.get_version.outputs.VERSION }}
          draft: false
          prerelease: false

      - name: Upload Windows Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./Installify_${{ steps.get_version.outputs.VERSION }}_windows.exe
          asset_name: Installify_${{ steps.get_version.outputs.VERSION }}_windows.exe
          asset_content_type: application/octet-stream

      - name: Upload macOS Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./Installify_${{ steps.get_version.outputs.VERSION }}_macos
          asset_name: Installify_${{ steps.get_version.outputs.VERSION }}_macos
          asset_content_type: application/octet-stream

      - name: Upload Linux Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./Installify_${{ steps.get_version.outputs.VERSION }}_linux
          asset_name: Installify_${{ steps.get_version.outputs.VERSION }}_linux
          asset_content_type: application/octet-stream